version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: inventorysync-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-inventorysync}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_DB: ${POSTGRES_DB:-inventorysync_prod}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - inventorysync-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-inventorysync}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: inventorysync-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-changeme}
    ports:
      - "6379:6379"
    networks:
      - inventorysync-network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: inventorysync-backend
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-inventorysync}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-inventorysync_prod}
      REDIS_URL: redis://:${REDIS_PASSWORD:-changeme}@redis:6379/0
      ENVIRONMENT: ${ENVIRONMENT:-production}
      SECRET_KEY: ${SECRET_KEY}
      SHOPIFY_API_KEY: ${SHOPIFY_API_KEY}
      SHOPIFY_API_SECRET: ${SHOPIFY_API_SECRET}
      SHOPIFY_WEBHOOK_SECRET: ${SHOPIFY_WEBHOOK_SECRET}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - inventorysync-network
    volumes:
      - ./backend/logs:/app/logs
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: inventorysync-frontend
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://backend:8000}
      VITE_SHOPIFY_API_KEY: ${SHOPIFY_API_KEY}
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - inventorysync-network
    volumes:
      - ./ssl:/etc/nginx/ssl:ro
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: inventorysync-nginx
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - inventorysync-network
    restart: unless-stopped

networks:
  inventorysync-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
