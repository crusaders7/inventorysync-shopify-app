openapi: 3.0.3
info:
  title: InventorySync API
  description: |
    Enterprise-level inventory management for Shopify stores.
    
    ## Authentication
    All API requests require authentication using Bearer tokens.
    Include the token in the Authorization header: `Authorization: Bearer <token>`
    
    ## Rate Limiting
    - Default: 100 requests per minute per API key
    - Burst: 20 requests
    
    ## Pagination
    List endpoints support pagination with `page` and `limit` parameters.
    
    ## Error Handling
    All errors follow a consistent format with error codes and messages.
  version: 1.0.0
  contact:
    name: API Support
    email: api@inventorysync.com
    url: https://inventorysync.com/support

servers:
  - url: https://api.inventorysync.com/api/v1
    description: Production server
  - url: https://staging-api.inventorysync.com/api/v1
    description: Staging server
  - url: http://localhost:8000/api/v1
    description: Development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
        details:
          type: object
          description: Additional error details
        timestamp:
          type: string
          format: date-time
      required:
        - error
        - timestamp
    
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
        shopify_product_id:
          type: string
        title:
          type: string
        sku:
          type: string
        barcode:
          type: string
        vendor:
          type: string
        product_type:
          type: string
        status:
          type: string
          enum: [active, archived, draft]
        cost:
          type: number
          format: float
        price:
          type: number
          format: float
        compare_at_price:
          type: number
          format: float
        tracked:
          type: boolean
        requires_shipping:
          type: boolean
        taxable:
          type: boolean
        custom_fields:
          type: object
          additionalProperties: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    
    Inventory:
      type: object
      properties:
        id:
          type: string
          format: uuid
        product_id:
          type: string
          format: uuid
        location_id:
          type: string
          format: uuid
        available_quantity:
          type: integer
        incoming_quantity:
          type: integer
        committed_quantity:
          type: integer
        min_stock_level:
          type: integer
        max_stock_level:
          type: integer
        reorder_point:
          type: integer
        reorder_quantity:
          type: integer
        metadata:
          type: object
        last_updated:
          type: string
          format: date-time
    
    Alert:
      type: object
      properties:
        id:
          type: string
          format: uuid
        store_id:
          type: string
          format: uuid
        product_id:
          type: string
          format: uuid
        alert_type:
          type: string
          enum: [low_stock, out_of_stock, overstock, reorder_point, expiring]
        priority:
          type: string
          enum: [low, medium, high, critical]
        status:
          type: string
          enum: [active, acknowledged, resolved, snoozed]
        message:
          type: string
        metadata:
          type: object
        created_at:
          type: string
          format: date-time
        resolved_at:
          type: string
          format: date-time
          nullable: true

security:
  - bearerAuth: []

paths:
  /health:
    get:
      summary: Health check
      description: Check API health status
      tags:
        - System
      security: []
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  service:
                    type: string
                  database:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
  
  /auth/login:
    post:
      summary: Login
      description: Authenticate and receive access token
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required:
                - email
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
                  token_type:
                    type: string
                  expires_in:
                    type: integer
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /products:
    get:
      summary: List products
      description: Get paginated list of products
      tags:
        - Products
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: search
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [active, archived, draft]
        - name: vendor
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
                      pages:
                        type: integer
    
    post:
      summary: Create product
      description: Create a new product
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
  
  /products/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    get:
      summary: Get product
      description: Get product by ID
      tags:
        - Products
      responses:
        '200':
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update product
      description: Update product details
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    
    delete:
      summary: Delete product
      description: Delete a product
      tags:
        - Products
      responses:
        '204':
          description: Product deleted successfully
  
  /inventory:
    get:
      summary: List inventory
      description: Get inventory levels across locations
      tags:
        - Inventory
      parameters:
        - name: product_id
          in: query
          schema:
            type: string
            format: uuid
        - name: location_id
          in: query
          schema:
            type: string
            format: uuid
        - name: low_stock
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Inventory retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Inventory'
  
  /alerts:
    get:
      summary: List alerts
      description: Get active alerts
      tags:
        - Alerts
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [active, acknowledged, resolved, snoozed]
        - name: priority
          in: query
          schema:
            type: string
            enum: [low, medium, high, critical]
        - name: type
          in: query
          schema:
            type: string
            enum: [low_stock, out_of_stock, overstock, reorder_point, expiring]
      responses:
        '200':
          description: Alerts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Alert'
                  summary:
                    type: object
                    properties:
                      total:
                        type: integer
                      by_priority:
                        type: object
                      by_type:
                        type: object

tags:
  - name: System
    description: System endpoints
  - name: Authentication
    description: Authentication endpoints
  - name: Products
    description: Product management
  - name: Inventory
    description: Inventory management
  - name: Alerts
    description: Alert management
