version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: inventorysync-db-dev
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-inventorysync}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-devsecret}
      POSTGRES_DB: ${POSTGRES_DB:-inventorysync_dev}
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./backend/init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - inventorysync-dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-inventorysync}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: inventorysync-redis-dev
    command: redis-server --requirepass ${REDIS_PASSWORD:-devsecret}
    ports:
      - "6379:6379"
    networks:
      - inventorysync-dev
    volumes:
      - redis_dev_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--auth", "${REDIS_PASSWORD:-devsecret}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (Development with hot reload)
  backend:
    build:
      context: .
      dockerfile: ./docker/backend/Dockerfile.dev
    container_name: inventorysync-backend-dev
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-inventorysync}:${POSTGRES_PASSWORD:-devsecret}@postgres:5432/${POSTGRES_DB:-inventorysync_dev}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-inventorysync_dev}
      POSTGRES_USER: ${POSTGRES_USER:-inventorysync}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-devsecret}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-devsecret}@redis:6379/0
      
      # App settings
      ENVIRONMENT: development
      DEBUG: "true"
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-change-in-production}
      
      # Shopify
      SHOPIFY_API_KEY: ${SHOPIFY_API_KEY}
      SHOPIFY_API_SECRET: ${SHOPIFY_API_SECRET}
      SHOPIFY_WEBHOOK_SECRET: ${SHOPIFY_WEBHOOK_SECRET}
      SHOPIFY_APP_URL: ${SHOPIFY_APP_URL:-http://localhost:3000}
      
      # Development settings
      RELOAD: "true"
      LOG_LEVEL: debug
    volumes:
      - ./backend:/app/backend
      - ./logs:/app/logs
      - backend_venv:/app/venv
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - inventorysync-dev
    command: uvicorn backend.main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend (Development with hot reload)
  frontend:
    build:
      context: .
      dockerfile: ./docker/frontend/Dockerfile.dev
    container_name: inventorysync-frontend-dev
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:8000}
      VITE_SHOPIFY_API_KEY: ${SHOPIFY_API_KEY}
      NODE_ENV: development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "5173:5173"
    depends_on:
      - backend
    networks:
      - inventorysync-dev
    command: npm run dev -- --host 0.0.0.0

  # Celery Worker (for background tasks)
  celery_worker:
    build:
      context: .
      dockerfile: ./docker/backend/Dockerfile.dev
    container_name: inventorysync-celery-worker-dev
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-inventorysync}:${POSTGRES_PASSWORD:-devsecret}@postgres:5432/${POSTGRES_DB:-inventorysync_dev}
      REDIS_URL: redis://:${REDIS_PASSWORD:-devsecret}@redis:6379/0
      ENVIRONMENT: development
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-change-in-production}
    volumes:
      - ./backend:/app/backend
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - inventorysync-dev
    command: celery -A backend.core.celery_app worker --loglevel=info

  # Celery Beat (for scheduled tasks)
  celery_beat:
    build:
      context: .
      dockerfile: ./docker/backend/Dockerfile.dev
    container_name: inventorysync-celery-beat-dev
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-inventorysync}:${POSTGRES_PASSWORD:-devsecret}@postgres:5432/${POSTGRES_DB:-inventorysync_dev}
      REDIS_URL: redis://:${REDIS_PASSWORD:-devsecret}@redis:6379/0
      ENVIRONMENT: development
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-change-in-production}
    volumes:
      - ./backend:/app/backend
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - inventorysync-dev
    command: celery -A backend.core.celery_app beat --loglevel=info

  # Flower (Celery monitoring)
  flower:
    image: mher/flower:2.0
    container_name: inventorysync-flower-dev
    environment:
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-devsecret}@redis:6379/0
      FLOWER_PORT: 5555
      FLOWER_BASIC_AUTH: ${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-admin}
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks:
      - inventorysync-dev

  # pgAdmin (Database management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: inventorysync-pgadmin-dev
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@inventorysync.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - inventorysync-dev
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  # Mailhog (Email testing)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: inventorysync-mailhog-dev
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    networks:
      - inventorysync-dev

networks:
  inventorysync-dev:
    driver: bridge

volumes:
  postgres_dev_data:
  redis_dev_data:
  backend_venv:
  pgadmin_data:
